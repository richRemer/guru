#!/bin/bash -e

declare exe=guru
declare cmdname=

error () {
    local status=${2:-1}
    echo "$exe: $1" >&2
    return $status
}

guru-install () {
    local -a pkgs=("$@")
    local pkg

    if test ${#pkgs[@]} -eq 0; then
        pkgs=(.)
    fi

    for pkg in "${pkgs[@]}"; do
        pkg-fetch "$pkg"
    done

    for pkg in "${pkgs[@]}"; do
        pkg-install "$pkg"
    done
}

list-commands () {
    echo "Commands recognized:"
    compgen -c | grep ^$exe- | cut -d- -f2- | sed -e "s/^/  $exe /"
}

pkg-fetch () {
    local pkg_spec="$1"

    if grep -qP ^https?: <<< "$pkg_spec"; then
        error "remote package '$pkg_spec' not supported"
    elif grep -qP ^github: <<< "$pkg_spec"; then
        error "GitHub package '$pkg_spec' not supported"
    elif ! test -d "$pkg_spec"; then
        error "specified package '$pkg_spec' is not a directory"
    else
        pkg-verify "$pkg_spec"
    fi
}

pkg-install () {
    local pkg_root="$1"
    local pkg_spec=${2:-$(basename $(realpath "$pkg_root"))}

    echo "installing $pkg_spec"
    pkg-install-apt "$pkg_root" "$pkg_spec"
    pkg-install-bin "$pkg_root" "$pkg_spec"
}

pkg-install-apt () {
    local pkg_root="$1"
    local pkg_spec=${2:-$(basename $(realpath "$pkg_root"))}

    if ! test -f "$pkg_root/apt"; then
        return
    fi

    echo "installing system dependencies with APT"
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
        $(strip-comments < "$pkg_root/apt")
}

pkg-install-bin () {
    local pkg_root="$1"
    local pkg_spec=${2:-$(basename $(realpath "$pkg_root"))}

    if ! test -d "$pkg_root/bin"; then
        return
    fi

    echo "installing binaries"
    cp -vrT "$pkg_root/bin" /usr/local/bin
}

pkg-verify () {
    local pkg_root="$1"
    local pkg_spec=${2:-$(basename $(realpath "$pkg_root"))}

    if ! test -f "$pkg_root/version"; then
        error "'$pkg_spec' is not a valid package"
    fi
}

strip-comments () {
    grep -v ^\#
}

usage () {
    echo "Usage:"
    echo "  $exe [<options>]"
    echo "  $exe [<options>] <command> [<command-opts>]"
    echo
    echo "Options recognized:"
    echo "  --help      Show this help message."
    echo "  --list      List available commands."
}

eval set -- $(getopt -o "" --long help,list -n $exe -- "$@")

while true; do
    case "$1" in
        --help) usage; exit;;
        --list) list-commands; exit;;
        --)     shift; break;;
        *)      break;;
    esac
done

cmdname="$1"

if shift; then
    if type -p guru-"$cmdname" &>/dev/null; then
        guru-"$cmdname" "$@"
    else
        error "'$cmdname' is not a $exe command.  Try '$exe --help'."
    fi
else
    usage
    echo
    list-commands
fi
