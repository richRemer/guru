#!/bin/bash -e
# Copyright Â© 2025 Richard Remer

# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is furnished to do
# so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

declare exe=guru
declare cmd=
declare prefix=/usr/local

detect-color () {
    local colors=$(tput colors 2>/dev/null)

    if test $? -ne 0 -o "$colors" -le 2; then
        disable-color
    fi
}

disable-color () {
    # override style function to be no-op
    style () { :; }
}

error () {
    local status=${2:-1}
    echo "$exe: $1" >&2
    return $status
}

guru-install () {
    local -a pkgs=("$@")
    local pkg

    if test ${#pkgs[@]} -eq 0; then
        pkgs=(.)
    fi

    for pkg in "${pkgs[@]}"; do
        pkg-fetch "$pkg"
    done

    for pkg in "${pkgs[@]}"; do
        pkg-install "$pkg"
    done
}

list-commands () {
    echo "Commands recognized:"
    compgen -c | grep ^$exe- | cut -d- -f2- | sed -e "s/^/  $exe /"
}

pkg-fetch () {
    local pkg_spec="$1"

    if grep -qP ^https?: <<< "$pkg_spec"; then
        error "remote package '$pkg_spec' not supported"
    elif grep -qP ^github: <<< "$pkg_spec"; then
        error "GitHub package '$pkg_spec' not supported"
    elif ! test -d "$pkg_spec"; then
        error "specified package '$pkg_spec' is not a directory"
    else
        pkg-verify "$pkg_spec"
    fi
}

pkg-install () {
    local pkg_root="$1"
    local pkg_spec=${2:-$(basename $(realpath "$pkg_root"))}

    echo "$(style +b green)installing $pkg_spec$(style)"
    pkg-install-apt "$pkg_root" "$pkg_spec"
    pkg-install-bin "$pkg_root" "$pkg_spec"
    echo "$(style green)completed installing $pkg_spec$(style)"
}

pkg-install-apt () {
    local pkg_root="$1"
    local pkg_spec=${2:-$(basename $(realpath "$pkg_root"))}

    if ! test -f "$pkg_root/apt"; then
        return
    fi

    echo "$(style +bu white)installing system dependencies with APT$(style)"
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
        $(strip-comments < "$pkg_root/apt")
}

pkg-install-bin () {
    local pkg_root="$1"
    local pkg_spec=${2:-$(basename $(realpath "$pkg_root"))}

    if ! test -d "$pkg_root/bin"; then
        return
    fi

    echo "$(style +bu white)installing binaries$(style)"
    cp -vrT "$pkg_root/bin" "$prefix/bin"
}

pkg-verify () {
    local pkg_root="$1"
    local pkg_spec=${2:-$(basename $(realpath "$pkg_root"))}

    if ! test -f "$pkg_root/version"; then
        error "'$pkg_spec' is not a valid package"
    fi
}

run () {
    local cmd="$1"; shift

    detect-color
    guru-"$cmd" "$@"
}

strip-comments () {
    grep -v ^\#
}

style () {
    local -ia styles=()
    local style

    for style in "$@"; do
        case "$style" in
            bold)           styles+=(1);;
            dim)            styles+=(2);;
            italic)         styles+=(3);;
            underline)      styles+=(4);;
            -bold|-dim)     styles+=(22);;
            -italic)        styles+=(23);;
            -underline)     styles+=(24);;
            black)          styles+=(30);;
            red)            styles+=(31);;
            green)          styles+=(32);;
            yellow)         styles+=(33);;
            blue)           styles+=(34);;
            magenta)        styles+=(35);;
            cyan)           styles+=(36);;
            white)          styles+=(37);;
            +*)
                for (( i=1; i<${#1}; i++)); do
                    case "${1:$i:1}" in
                        b)  styles+=(1);;
                        d)  styles+=(2);;
                        i)  styles+=(3);;
                        u)  styles+=(4);;
                        *)  error "option '+${1:$1:1}' is not a valid style";;
                    esac
                done
                ;;
            -*)
                for (( i=1; i<${#1}; i++)); do
                    case "${1:$i:1}" in
                        b)  styles+=(22);;
                        d)  styles+=(22);;
                        i)  styles+=(23);;
                        u)  styles+=(24);;
                        *)  error "option '-${1:$1:1}' is not a valid style";;
                    esac
                done
                ;;
            *)              error "argument '$style' is not a valid style";;
        esac
    done

    if test ${#styles[@]} -eq 0; then
        styles=(0)
    fi

    (IFS=\;; echo -e "\e[${styles[*]}m")
}

version () {
    echo "$exe v0.0.0"
}

usage () {
    echo "Usage:"
    echo "  $exe [<options>]"
    echo "  $exe [<options>] <command> [<command-opts>]"
    echo
    echo "Options recognized:"
    echo "  --help          Show this help message."
    echo "  --list          List available commands."
    echo "  --no-color      Disable color output."
    echo "  --prefix=DIR    Set install location. (default /usr/local)"
    echo "  --version       Print version information."
}

eval set -- $(getopt -o "" --long help,list,no-color,prefix:,version -n $exe -- "$@")

while true; do
    case "$1" in
        --help)     usage;              exit;;
        --list)     list-commands;      exit;;
        --no-color) disable-color;;
        --prefix)   prefix="$2";        shift 2 || error "missing prefix";;
        --prefix=*) prefix="${1#*=}";   shift;;
        --version)  version;            exit;;
        --)                             shift; break;;
        *)                              break;;
    esac
done

cmd="$1"

if ! shift; then
    usage
    echo
    list-commands
    exit
fi

if ! type -p guru-"$cmd" &>/dev/null; then
    error "'$cmd' is not a $exe command.  Try '$exe --help'."
fi

# this has to go last to ensure it's safe to overwrite this file while it's
# executing; additional code may be written to end of file but exit will
# make sure it's never executed
run "$cmd" "$@"; exit
